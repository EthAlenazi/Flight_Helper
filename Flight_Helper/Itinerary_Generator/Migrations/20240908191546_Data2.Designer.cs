// <auto-generated />
using System;
using Itinerary_Generator.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Itinerary_Generator.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240908191546_Data2")]
    partial class Data2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Itinerary_Generator.Data.Model.Activity", b =>
                {
                    b.Property<int>("ActivityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActivityID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LookupTypesID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ActivityID");

                    b.HasIndex("LookupTypesID");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("Itinerary_Generator.Data.Model.DailyActivity", b =>
                {
                    b.Property<int>("DailyActivityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DailyActivityID"));

                    b.Property<int>("ActivityID")
                        .HasColumnType("int");

                    b.Property<int>("DayID")
                        .HasColumnType("int");

                    b.HasKey("DailyActivityID");

                    b.HasIndex("ActivityID");

                    b.HasIndex("DayID");

                    b.ToTable("DailyActivities");
                });

            modelBuilder.Entity("Itinerary_Generator.Data.Model.DailyTransport", b =>
                {
                    b.Property<int>("DailyTransportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DailyTransportID"));

                    b.Property<int>("DayID")
                        .HasColumnType("int");

                    b.Property<int>("TransportID")
                        .HasColumnType("int");

                    b.HasKey("DailyTransportID");

                    b.HasIndex("DayID");

                    b.HasIndex("TransportID");

                    b.ToTable("DailyTransports");
                });

            modelBuilder.Entity("Itinerary_Generator.Data.Model.Day", b =>
                {
                    b.Property<int>("DayID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DayID"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("ItineraryID")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time");

                    b.Property<int>("TransportID")
                        .HasColumnType("int");

                    b.HasKey("DayID");

                    b.HasIndex("ItineraryID");

                    b.HasIndex("TransportID");

                    b.ToTable("Days");
                });

            modelBuilder.Entity("Itinerary_Generator.Data.Model.Itinerary", b =>
                {
                    b.Property<int>("ItineraryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItineraryID"));

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("PDFGenerated")
                        .HasColumnType("bit");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("TotalCost")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ItineraryID");

                    b.HasIndex("UserID");

                    b.ToTable("Itineraries");
                });

            modelBuilder.Entity("Itinerary_Generator.Data.Model.LookupTypes", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("LookupTypes");
                });

            modelBuilder.Entity("Itinerary_Generator.Data.Model.Preference", b =>
                {
                    b.Property<int>("PreferenceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PreferenceID"));

                    b.Property<string>("ActivityType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LookupTypesID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("PreferenceID");

                    b.HasIndex("LookupTypesID");

                    b.ToTable("preferences");
                });

            modelBuilder.Entity("Itinerary_Generator.Data.Model.Transport", b =>
                {
                    b.Property<int>("TransportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransportID"));

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("EndLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LookupTypesID")
                        .HasColumnType("int");

                    b.Property<string>("StartLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("TransportID");

                    b.HasIndex("LookupTypesID");

                    b.ToTable("Transports");
                });

            modelBuilder.Entity("Itinerary_Generator.Data.Model.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Itinerary_Generator.Data.Model.Activity", b =>
                {
                    b.HasOne("Itinerary_Generator.Data.Model.LookupTypes", "LookupTypes")
                        .WithMany()
                        .HasForeignKey("LookupTypesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LookupTypes");
                });

            modelBuilder.Entity("Itinerary_Generator.Data.Model.DailyActivity", b =>
                {
                    b.HasOne("Itinerary_Generator.Data.Model.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Itinerary_Generator.Data.Model.Day", "Day")
                        .WithMany()
                        .HasForeignKey("DayID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Day");
                });

            modelBuilder.Entity("Itinerary_Generator.Data.Model.DailyTransport", b =>
                {
                    b.HasOne("Itinerary_Generator.Data.Model.Day", "Day")
                        .WithMany()
                        .HasForeignKey("DayID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Itinerary_Generator.Data.Model.Transport", "Transport")
                        .WithMany()
                        .HasForeignKey("TransportID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Day");

                    b.Navigation("Transport");
                });

            modelBuilder.Entity("Itinerary_Generator.Data.Model.Day", b =>
                {
                    b.HasOne("Itinerary_Generator.Data.Model.Itinerary", "Itinerary")
                        .WithMany()
                        .HasForeignKey("ItineraryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Itinerary_Generator.Data.Model.Transport", "Transport")
                        .WithMany()
                        .HasForeignKey("TransportID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Itinerary");

                    b.Navigation("Transport");
                });

            modelBuilder.Entity("Itinerary_Generator.Data.Model.Itinerary", b =>
                {
                    b.HasOne("Itinerary_Generator.Data.Model.User", "user")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Itinerary_Generator.Data.Model.Preference", b =>
                {
                    b.HasOne("Itinerary_Generator.Data.Model.LookupTypes", "LookupTypes")
                        .WithMany()
                        .HasForeignKey("LookupTypesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LookupTypes");
                });

            modelBuilder.Entity("Itinerary_Generator.Data.Model.Transport", b =>
                {
                    b.HasOne("Itinerary_Generator.Data.Model.LookupTypes", "LookupTypes")
                        .WithMany()
                        .HasForeignKey("LookupTypesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LookupTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
